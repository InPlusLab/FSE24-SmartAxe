{
	"compiler": {
		"version": "0.8.6+commit.11564f7e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"name": "CantSetToNull",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "FeeTooHigh",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "MaxMustBeBiggerThanMin",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "MinMustBeLowerThanMax",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotAManager",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotAnAdmin",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotPendingAdmin",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ShareTooHigh",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Unchangeable",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ZeroAmount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "adminShifter",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newAdmin",
						"type": "address"
					}
				],
				"name": "AcceptAdmin",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "id",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "outputTokenAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "enum WithDestinationFunctionality.SwapStatus",
						"name": "status",
						"type": "uint8"
					}
				],
				"name": "CrossChainProcessed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "id",
						"type": "bytes32"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "srcInputToken",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "srcInputAmount",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "dstChainID",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "dstOutputToken",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "dstMinOutputAmount",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "recipient",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "integrator",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "router",
								"type": "address"
							}
						],
						"indexed": false,
						"internalType": "struct BridgeBase.BaseCrossChainParams",
						"name": "parameters",
						"type": "tuple"
					}
				],
				"name": "CrossChainRequestSent",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "RubicPart",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "integratorPart",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "integrator",
						"type": "address"
					}
				],
				"name": "FixedCryptoFee",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "collector",
						"type": "address"
					}
				],
				"name": "FixedCryptoFeeCollected",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "admintShifter",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newAdmin",
						"type": "address"
					}
				],
				"name": "InitAdminTransfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "version",
						"type": "uint8"
					}
				],
				"name": "Initialized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "integrator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "IntegratorTokenFeeCollected",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Paused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "previousAdminRole",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "newAdminRole",
						"type": "bytes32"
					}
				],
				"name": "RoleAdminChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleGranted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleRevoked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "RubicTokenFeeCollected",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "fee",
						"type": "uint256"
					}
				],
				"name": "SetFixedCryptoFee",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "fee",
						"type": "uint256"
					}
				],
				"name": "SetRubicPlatformFee",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					}
				],
				"name": "SweepTokens",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "RubicPart",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "integratorPart",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "integrator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "TokenFee",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Unpaused",
				"type": "event"
			},
			{
				"stateMutability": "nonpayable",
				"type": "fallback"
			},
			{
				"inputs": [],
				"name": "DEFAULT_ADMIN_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "MANAGER_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "RELAYER_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "RubicPlatformFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "acceptAdmin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "availableIntegratorCryptoFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "availableIntegratorTokenFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "availableRubicCryptoFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "availableRubicGasFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "availableRubicTokenFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "blockchainToGasFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_id",
						"type": "bytes32"
					},
					{
						"internalType": "enum WithDestinationFunctionality.SwapStatus",
						"name": "_statusCode",
						"type": "uint8"
					}
				],
				"name": "changeTxStatus",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					}
				],
				"name": "collectGasFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_token",
						"type": "address"
					}
				],
				"name": "collectIntegratorFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_integrator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_token",
						"type": "address"
					}
				],
				"name": "collectIntegratorFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_recipient",
						"type": "address"
					}
				],
				"name": "collectRubicCryptoFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_recipient",
						"type": "address"
					}
				],
				"name": "collectRubicFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "fixedCryptoFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					}
				],
				"name": "getRoleAdmin",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "grantRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "hasRole",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "integratorToFeeInfo",
				"outputs": [
					{
						"internalType": "bool",
						"name": "isIntegrator",
						"type": "bool"
					},
					{
						"internalType": "uint32",
						"name": "tokenFee",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "RubicTokenShare",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "RubicFixedCryptoShare",
						"type": "uint32"
					},
					{
						"internalType": "uint128",
						"name": "fixedFeeAmount",
						"type": "uint128"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "maxRubicPlatformFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "maxTokenAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "minTokenAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pauseExecution",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "paused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "processedTransactions",
				"outputs": [
					{
						"internalType": "enum WithDestinationFunctionality.SwapStatus",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "renounceRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "revokeRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_fixedCryptoFee",
						"type": "uint256"
					}
				],
				"name": "setFixedCryptoFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_blockchainID",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_gasFee",
						"type": "uint256"
					}
				],
				"name": "setGasFeeOfBlockchain",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_integrator",
						"type": "address"
					},
					{
						"components": [
							{
								"internalType": "bool",
								"name": "isIntegrator",
								"type": "bool"
							},
							{
								"internalType": "uint32",
								"name": "tokenFee",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "RubicTokenShare",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "RubicFixedCryptoShare",
								"type": "uint32"
							},
							{
								"internalType": "uint128",
								"name": "fixedFeeAmount",
								"type": "uint128"
							}
						],
						"internalType": "struct BridgeBase.IntegratorFeeInfo",
						"name": "_info",
						"type": "tuple"
					}
				],
				"name": "setIntegratorInfo",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_maxFee",
						"type": "uint256"
					}
				],
				"name": "setMaxRubicPlatformFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_maxTokenAmount",
						"type": "uint256"
					}
				],
				"name": "setMaxTokenAmount",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_minTokenAmount",
						"type": "uint256"
					}
				],
				"name": "setMinTokenAmount",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_platformFee",
						"type": "uint256"
					}
				],
				"name": "setRubicPlatformFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_recipient",
						"type": "address"
					}
				],
				"name": "sweepTokens",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_newAdmin",
						"type": "address"
					}
				],
				"name": "transferAdmin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unpauseExecution",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"changeTxStatus(bytes32,uint8)": {
					"details": "Function changes values associated with certain originalTxHash",
					"params": {
						"_id": "ID of the transaction to change",
						"_statusCode": "Associated status"
					}
				},
				"collectIntegratorFee(address)": {
					"details": "Integrator can collect fees calling this function",
					"params": {
						"_token": "The token to collect fees in"
					}
				},
				"collectIntegratorFee(address,address)": {
					"details": "Managers can collect integrator's fees calling this function Fees go to the integrator",
					"params": {
						"_integrator": "Address of the integrator",
						"_token": "The token to collect fees in"
					}
				},
				"collectRubicCryptoFee(address)": {
					"details": "Calling this function managers can collect Rubic's fixed crypto fee",
					"params": {
						"_recipient": "The recipient"
					}
				},
				"collectRubicFee(address,address)": {
					"details": "Calling this function managers can collect Rubic's token fee",
					"params": {
						"_recipient": "The recipient",
						"_token": "The token to collect fees in"
					}
				},
				"getRoleAdmin(bytes32)": {
					"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
				},
				"grantRole(bytes32,address)": {
					"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
				},
				"hasRole(bytes32,address)": {
					"details": "Returns `true` if `account` has been granted `role`."
				},
				"paused()": {
					"details": "Returns true if the contract is paused, and false otherwise."
				},
				"renounceRole(bytes32,address)": {
					"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
				},
				"revokeRole(bytes32,address)": {
					"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
				},
				"setFixedCryptoFee(uint256)": {
					"details": "Sets fixed crypto fee",
					"params": {
						"_fixedCryptoFee": "Fixed crypto fee"
					}
				},
				"setGasFeeOfBlockchain(uint256,uint256)": {
					"details": "Changes crypto tokens values for blockchains in blockchainCryptoFee variables",
					"params": {
						"_blockchainID": "ID of the blockchain",
						"_gasFee": "Fee amount of native token that must be sent in init call"
					}
				},
				"setIntegratorInfo(address,(bool,uint32,uint32,uint32,uint128))": {
					"details": "Sets fee info associated with an integrator",
					"params": {
						"_info": "Struct with fee info",
						"_integrator": "Address of the integrator"
					}
				},
				"setMaxRubicPlatformFee(uint256)": {
					"details": "Sets the limit of Rubic token fee",
					"params": {
						"_maxFee": "The limit"
					}
				},
				"setMaxTokenAmount(address,uint256)": {
					"details": "Changes requirement for maximum token amount on transfers",
					"params": {
						"_maxTokenAmount": "Amount of tokens",
						"_token": "The token address to setup"
					}
				},
				"setMinTokenAmount(address,uint256)": {
					"details": "Changes requirement for minimal token amount on transfers",
					"params": {
						"_minTokenAmount": "Amount of tokens",
						"_token": "The token address to setup"
					}
				},
				"setRubicPlatformFee(uint256)": {
					"details": "Sets Rubic token fee",
					"params": {
						"_platformFee": "Fixed crypto fee"
					}
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}."
				},
				"sweepTokens(address,uint256,address)": {
					"details": "A function to rescue stuck tokens from the contract",
					"params": {
						"_amount": "The amount of tokens",
						"_recipient": "The recipient",
						"_token": "The token to sweep"
					}
				},
				"transferAdmin(address)": {
					"details": "Transfers admin role",
					"params": {
						"_newAdmin": "New admin's address"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"pauseExecution()": {
					"notice": "CONTROL FUNCTIONS ///"
				},
				"setRubicPlatformFee(uint256)": {
					"notice": "Cannot be higher than limit set only by an admin"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"Rubic Bridge/contracts/architecture/WithDestinationFunctionality.sol": "WithDestinationFunctionality"
		},
		"evmVersion": "berlin",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
			"keccak256": "0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831",
			"license": "MIT",
			"urls": [
				"bzz-raw://3df5f6a75f86411cb20df54362ed4ec9b4c270720be20da7095f169932fa2709",
				"dweb:/ipfs/QmTThfuAwFYAvtHgZbmp6ZAbN2MVGSabAnhAbsB6JQxJCF"
			]
		},
		"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
			"keccak256": "0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa",
			"license": "MIT",
			"urls": [
				"bzz-raw://740cf4dc535e3082560cf5a031473029f322690fc8037fe9d5e3a8bef42e757c",
				"dweb:/ipfs/QmTQxFdfxcaueQa23VX34wAPqzruZbkzyeN58tZK2yav2b"
			]
		},
		"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
			"keccak256": "0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794",
			"license": "MIT",
			"urls": [
				"bzz-raw://f103ee2e4aecd37aac6ceefe670709cdd7613dee25fa2d4d9feaf7fc0aaa155e",
				"dweb:/ipfs/QmRiNZLoJk5k3HPMYGPGjZFd2ke1ZxjhJZkM45Ec9GH9hv"
			]
		},
		"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
			"keccak256": "0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250",
			"license": "MIT",
			"urls": [
				"bzz-raw://9c7d1f5e15633ab912b74c2f57e24559e66b03232300d4b27ff0f25bc452ecad",
				"dweb:/ipfs/QmYTJkc1cntYkKQ1Tu11nBcJLakiy93Tjytc4XHELo4GmR"
			]
		},
		"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
			"keccak256": "0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0",
			"license": "MIT",
			"urls": [
				"bzz-raw://ec9c629f63e66379f9c868a74f971064701cc6e30583872aa653f8b932518025",
				"dweb:/ipfs/QmY4MnZF2VMFwJkAwpdQwxEWA3KcGbNBKEmAVYePMVQWUR"
			]
		},
		"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
			"keccak256": "0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f",
			"license": "MIT",
			"urls": [
				"bzz-raw://c25f742ff154998d19a669e2508c3597b363e123ce9144cd0fcf6521229f401f",
				"dweb:/ipfs/QmQXRuFzStEWqeEPbhQU6cAg9PaSowxJVo4PDKyRod7dco"
			]
		},
		"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol": {
			"keccak256": "0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3",
			"license": "MIT",
			"urls": [
				"bzz-raw://ce6e5ae4633559c2aad156be884a96f7a9beb8dd31b1b630a6de55972e3af622",
				"dweb:/ipfs/QmQasz4sQoexkrvB7wCQAY6NbMoCtPS7AqomymRoJGYz85"
			]
		},
		"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
			"keccak256": "0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5",
			"license": "MIT",
			"urls": [
				"bzz-raw://d03ebe5406134f0c4a017dee625ff615031194493bd1e88504e5c8fae55bc166",
				"dweb:/ipfs/QmUZV5bMbgk2PAkV3coouSeSainHN2jhqaQDJaA7hQRyu2"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
			"keccak256": "0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422",
			"license": "MIT",
			"urls": [
				"bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b",
				"dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
			"keccak256": "0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149",
			"license": "MIT",
			"urls": [
				"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c",
				"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
			"keccak256": "0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb",
			"license": "MIT",
			"urls": [
				"bzz-raw://f8613145881436fc0480fff22da4868d611e2b0c0c3da083334eb4362ce1945a",
				"dweb:/ipfs/QmPqpP3YeRbBdTJRe6Gv2eGsUaANf4J6RwTNRW36iYahfV"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
			"keccak256": "0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a",
			"license": "MIT",
			"urls": [
				"bzz-raw://0895399d170daab2d69b4c43a0202e5a07f2e67a93b26e3354dcbedb062232f7",
				"dweb:/ipfs/QmUM1VH3XDk559Dsgh4QPvupr3YVKjz87HrSyYzzVFZbxw"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
			"keccak256": "0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09",
			"license": "MIT",
			"urls": [
				"bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758",
				"dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
			"keccak256": "0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e",
			"license": "MIT",
			"urls": [
				"bzz-raw://2b2835c737d073ef8b82a4cc246495a9740f43e7ff2cf130906b2449ff9bfb91",
				"dweb:/ipfs/QmSCWfNoSvvTN57ic7o1RW6NqSxxGAqbBTnLKc7QHe27qB"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol": {
			"keccak256": "0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a",
			"license": "MIT",
			"urls": [
				"bzz-raw://88ace2d60f265752f18903d839910be4e4e104340b2957678585b812447825d4",
				"dweb:/ipfs/QmXFkNxMc3AAGzhs2wUEZyErWQjsvoTGyYjuU5oZkFki5Z"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
			"keccak256": "0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f",
			"license": "MIT",
			"urls": [
				"bzz-raw://876afb75e0d5615b07f70a0bc69ae7f098df8ef058251b5934b9d05c9c7e0d1f",
				"dweb:/ipfs/Qmay4sdoBJQtP2cC1EDyQ8GzNPJZzo3v5soRRy8rDNLfBJ"
			]
		},
		"Rubic Bridge/contracts/BridgeBase.sol": {
			"keccak256": "0x8131da2952a1f90eca3f4ce21e4071a1e5b35a8bdc1a4ba8e7dbbba2930614ef",
			"license": "MIT",
			"urls": [
				"bzz-raw://0b2ecff0f8e1c844288f73813132c44fddcab49bccec0365cdecf617319b03e3",
				"dweb:/ipfs/Qme27of9vQcZT4RQsFSjx1uvi1HhSkvsWn6TWydza8bBqg"
			]
		},
		"Rubic Bridge/contracts/architecture/WithDestinationFunctionality.sol": {
			"keccak256": "0x2224b95716bf5ef1b68c485d5704f703d11c6bcf7ec3b49635ef687afef4d17e",
			"license": "MIT",
			"urls": [
				"bzz-raw://534db5cdcc0680198dba87f6fdd2af0cbc1aa6cbf7ae70258271e5231d6b7bce",
				"dweb:/ipfs/QmYuQMiJVd3g8KVx2V8Md9X1rw1udRVbbwqZH6dby4VxXQ"
			]
		},
		"Rubic Bridge/contracts/errors/Errors.sol": {
			"keccak256": "0x4836fbb0264c74855c48574dbcafff2cd71b0d530ec422eb52b0068fd99c4a72",
			"license": "MIT",
			"urls": [
				"bzz-raw://34663ca2aebcc3cba4399ba1245707b7a1b2623f084321cd9960850ca92f3bdc",
				"dweb:/ipfs/QmZjEDGgg16FzQafJME3wafYqsTKNpy7VC7GsSKX9dJHHY"
			]
		},
		"Rubic Bridge/contracts/libraries/FullMath.sol": {
			"keccak256": "0x56e9eb879f1af50792daf86543326df3ad6db6f59970d0bf7cb7a2f8fdb3d60e",
			"license": "MIT",
			"urls": [
				"bzz-raw://a4987f62252dd068e81891d687f2e5809a0d4fff8370ff6285356997ebcfa647",
				"dweb:/ipfs/QmRe5HTfsubVhDy73ypU8BGgxFt94tRYvBy14J6HnVPL6F"
			]
		}
	},
	"version": 1
}