{
	"compiler": {
		"version": "0.8.4+commit.c7e474f2"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "addr",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "chainId",
						"type": "uint256"
					}
				],
				"name": "TokenAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "addr",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "chainId",
						"type": "uint256"
					}
				],
				"name": "TokenRemoved",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "MAX_SIZE",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sourceAddr",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "targetChainId",
						"type": "uint256"
					}
				],
				"name": "getLocal",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "addr",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "chainId",
								"type": "uint256"
							},
							{
								"internalType": "enum RToken.IssueType",
								"name": "issueType",
								"type": "uint8"
							},
							{
								"internalType": "bool",
								"name": "exist",
								"type": "bool"
							}
						],
						"internalType": "struct RToken.Token",
						"name": "token",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "targetChainId",
						"type": "uint256"
					}
				],
				"name": "isZero",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "tokens",
						"type": "address[]"
					},
					{
						"internalType": "enum RToken.IssueType[]",
						"name": "issueTypes",
						"type": "uint8[]"
					},
					{
						"internalType": "uint256",
						"name": "targetChainId",
						"type": "uint256"
					}
				],
				"name": "issue",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "targetAddr",
						"type": "address"
					}
				],
				"name": "revoke",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"getLocal(address,uint256)": {
					"details": "This should be responsible to get token mapping for current chain",
					"params": {
						"sourceAddr": "address of source token",
						"targetChainId": "of token on target"
					}
				},
				"issue(address[],uint8[],uint256)": {
					"details": "This should be responsible to connect tokens between chains",
					"params": {
						"issueTypes": "for tokens",
						"targetChainId": "of remote token",
						"tokens": "addresses on link connection"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"revoke(address)": {
					"details": "This should be responsible to remove tokens connection between chains",
					"params": {
						"targetAddr": "address of target token"
					}
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"Syndicate Bridge/contracts/managers/BridgeTokenManager.sol": "BridgeTokenManager"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218",
			"license": "MIT",
			"urls": [
				"bzz-raw://fc980984badf3984b6303b377711220e067722bbd6a135b24669ff5069ef9f32",
				"dweb:/ipfs/QmPHXMSXj99XjSVM21YsY6aNtLLjLVXDbyN76J5HQYvvrz"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305",
			"license": "MIT",
			"urls": [
				"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5",
				"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
			"keccak256": "0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a",
			"license": "MIT",
			"urls": [
				"bzz-raw://bc5b5dc12fbc4002f282eaa7a5f06d8310ed62c1c77c5770f6283e058454c39a",
				"dweb:/ipfs/Qme9rE2wS3yBuyJq9GgbmzbsBQsW2M2sVFqYYLw7bosGrv"
			]
		},
		"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
			"keccak256": "0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1",
			"license": "MIT",
			"urls": [
				"bzz-raw://9d213d3befca47da33f6db0310826bcdb148299805c10d77175ecfe1d06a9a68",
				"dweb:/ipfs/QmRgCn6SP1hbBkExUADFuDo8xkT4UU47yjNF5FhCeRbQmS"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa",
			"license": "MIT",
			"urls": [
				"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931",
				"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
			"license": "MIT",
			"urls": [
				"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
				"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
			"license": "MIT",
			"urls": [
				"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
				"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
			]
		},
		"Syndicate Bridge/contracts/interfaces/IBridgeToken.sol": {
			"keccak256": "0x408cc04fffb0e645bbc0399143bb763f12456a2d203891cea8952fdeb00631d9",
			"license": "MIT",
			"urls": [
				"bzz-raw://cf8e6eeeb691bf0e4289fb57197583063bfa2d4d0383448d0011a7b84e80fb37",
				"dweb:/ipfs/QmY3bJ4GaYhfwY2P8chxr2FmWW1tZMEYTHoReDh1eP4TLZ"
			]
		},
		"Syndicate Bridge/contracts/interfaces/IBridgeTokenManager.sol": {
			"keccak256": "0x36bfbca4f6ba1f8e8fc0f2effa6a1d43d22a83bda9c189d109ae72f67f9b4fd6",
			"license": "MIT",
			"urls": [
				"bzz-raw://d97d9c127d97024c0289dc6d615458ab6ee8f71dd11fa154f440a256e5d9a2ca",
				"dweb:/ipfs/QmZ6nwE6LdXVUQkVCUZb9zU4za7mAUKm7TkMKVM7bZmSjD"
			]
		},
		"Syndicate Bridge/contracts/library/RToken.sol": {
			"keccak256": "0x90ddd994ec4c16499929a0fb2f68543cdba5aabe8ad11235dd944697939f1d72",
			"license": "MIT",
			"urls": [
				"bzz-raw://dd7c934a778e47b1c5705a28df358ed25116f49238f6240045ff89ab1038e284",
				"dweb:/ipfs/QmZRm2gX4byvd6fnoqK7Hj8DMNWfhEfuKEbGdzkMU8JtNs"
			]
		},
		"Syndicate Bridge/contracts/managers/BridgeTokenManager.sol": {
			"keccak256": "0x718a2777c9fdbddf7201b1d782867d2000d286036a6d9b350851888df5299cf8",
			"license": "MIT",
			"urls": [
				"bzz-raw://44a76ce7db831364721975bdb234e9b463cbe71631fadfd1fe95d40e71bc2b6c",
				"dweb:/ipfs/Qmcuqd269JC9ecHpYApCRStB7QVQRhRRJPrNonana7RGiF"
			]
		}
	},
	"version": 1
}