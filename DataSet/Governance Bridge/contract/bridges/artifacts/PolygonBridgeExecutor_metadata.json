{
	"compiler": {
		"version": "0.8.17+commit.8df45f5f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "fxRootSender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "fxChild",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "delay",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "gracePeriod",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "minimumDelay",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "maximumDelay",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "guardian",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "DelayLongerThanMax",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "DelayShorterThanMin",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "DuplicateAction",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "EmptyTargets",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "FailedActionExecution",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "GracePeriodTooShort",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InconsistentParamsLength",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InsufficientBalance",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidActionsSetId",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidInitParams",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "MaximumDelayTooShort",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "MinimumDelayTooLong",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotGuardian",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "OnlyCallableByThis",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "OnlyQueuedActions",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "TimelockNotFinished",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "UnauthorizedChildOrigin",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "UnauthorizedRootOrigin",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					}
				],
				"name": "ActionsSetCanceled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "initiatorExecution",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bytes[]",
						"name": "returnedData",
						"type": "bytes[]"
					}
				],
				"name": "ActionsSetExecuted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address[]",
						"name": "targets",
						"type": "address[]"
					},
					{
						"indexed": false,
						"internalType": "uint256[]",
						"name": "values",
						"type": "uint256[]"
					},
					{
						"indexed": false,
						"internalType": "string[]",
						"name": "signatures",
						"type": "string[]"
					},
					{
						"indexed": false,
						"internalType": "bytes[]",
						"name": "calldatas",
						"type": "bytes[]"
					},
					{
						"indexed": false,
						"internalType": "bool[]",
						"name": "withDelegatecalls",
						"type": "bool[]"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "executionTime",
						"type": "uint256"
					}
				],
				"name": "ActionsSetQueued",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldDelay",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newDelay",
						"type": "uint256"
					}
				],
				"name": "DelayUpdate",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "oldFxChild",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newFxChild",
						"type": "address"
					}
				],
				"name": "FxChildUpdate",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "oldFxRootSender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newFxRootSender",
						"type": "address"
					}
				],
				"name": "FxRootSenderUpdate",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldGracePeriod",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newGracePeriod",
						"type": "uint256"
					}
				],
				"name": "GracePeriodUpdate",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "oldGuardian",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newGuardian",
						"type": "address"
					}
				],
				"name": "GuardianUpdate",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldMaximumDelay",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newMaximumDelay",
						"type": "uint256"
					}
				],
				"name": "MaximumDelayUpdate",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldMinimumDelay",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newMinimumDelay",
						"type": "uint256"
					}
				],
				"name": "MinimumDelayUpdate",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "actionsSetId",
						"type": "uint256"
					}
				],
				"name": "cancel",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "actionsSetId",
						"type": "uint256"
					}
				],
				"name": "execute",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "executeDelegateCall",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "actionsSetId",
						"type": "uint256"
					}
				],
				"name": "getActionsSetById",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address[]",
								"name": "targets",
								"type": "address[]"
							},
							{
								"internalType": "uint256[]",
								"name": "values",
								"type": "uint256[]"
							},
							{
								"internalType": "string[]",
								"name": "signatures",
								"type": "string[]"
							},
							{
								"internalType": "bytes[]",
								"name": "calldatas",
								"type": "bytes[]"
							},
							{
								"internalType": "bool[]",
								"name": "withDelegatecalls",
								"type": "bool[]"
							},
							{
								"internalType": "uint256",
								"name": "executionTime",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "executed",
								"type": "bool"
							},
							{
								"internalType": "bool",
								"name": "canceled",
								"type": "bool"
							}
						],
						"internalType": "struct IExecutorBase.ActionsSet",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getActionsSetCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "actionsSetId",
						"type": "uint256"
					}
				],
				"name": "getCurrentState",
				"outputs": [
					{
						"internalType": "enum IExecutorBase.ActionsSetState",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getDelay",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getFxChild",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getFxRootSender",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getGracePeriod",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getGuardian",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getMaximumDelay",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getMinimumDelay",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "actionHash",
						"type": "bytes32"
					}
				],
				"name": "isActionQueued",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "stateId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "rootMessageSender",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "processMessageFromRoot",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "receiveFunds",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "delay",
						"type": "uint256"
					}
				],
				"name": "updateDelay",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "fxChild",
						"type": "address"
					}
				],
				"name": "updateFxChild",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "fxRootSender",
						"type": "address"
					}
				],
				"name": "updateFxRootSender",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "gracePeriod",
						"type": "uint256"
					}
				],
				"name": "updateGracePeriod",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "guardian",
						"type": "address"
					}
				],
				"name": "updateGuardian",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "maximumDelay",
						"type": "uint256"
					}
				],
				"name": "updateMaximumDelay",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "minimumDelay",
						"type": "uint256"
					}
				],
				"name": "updateMinimumDelay",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Aave",
			"details": "Queuing an ActionsSet into this Executor can only be done by the FxChild and after passing the EthereumGovernanceExecutor check as the FxRoot sender",
			"events": {
				"FxChildUpdate(address,address)": {
					"details": "Emitted when the FxChild is updated",
					"params": {
						"newFxChild": "The address of the new FxChild*",
						"oldFxChild": "The address of the old FxChild"
					}
				},
				"FxRootSenderUpdate(address,address)": {
					"details": "Emitted when the FxRoot Sender is updated",
					"params": {
						"newFxRootSender": "The address of the new FxRootSender*",
						"oldFxRootSender": "The address of the old FxRootSender"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"cancel(uint256)": {
					"params": {
						"actionsSetId": "The id of the ActionsSet to cancel*"
					}
				},
				"constructor": {
					"details": "Constructor",
					"params": {
						"delay": "The delay before which an actions set can be executed",
						"fxChild": "The address of the FxChild",
						"fxRootSender": "The address of the transaction sender in FxRoot",
						"gracePeriod": "The time period after a delay during which an actions set can be executed",
						"guardian": "The address of the guardian, which can cancel queued proposals (can be zero)",
						"maximumDelay": "The maximum bound a delay can be set to",
						"minimumDelay": "The minimum bound a delay can be set to"
					}
				},
				"execute(uint256)": {
					"params": {
						"actionsSetId": "The id of the ActionsSet to execute*"
					}
				},
				"executeDelegateCall(address,bytes)": {
					"details": "This function is external so it allows to specify a defined msg.value for the delegate call, reducing the risk that a delegatecall gets executed with more value than intended",
					"returns": {
						"_0": "True if the delegate call was successful, false otherwise",
						"_1": "The bytes returned by the delegate call*"
					}
				},
				"getActionsSetById(uint256)": {
					"params": {
						"actionsSetId": "The id of the ActionsSet"
					},
					"returns": {
						"_0": "The data of the ActionsSet*"
					}
				},
				"getActionsSetCount()": {
					"returns": {
						"_0": "The number of actions sets*"
					}
				},
				"getCurrentState(uint256)": {
					"params": {
						"actionsSetId": "The id of the ActionsSet"
					},
					"returns": {
						"_0": "The current state of theI ActionsSet*"
					}
				},
				"getDelay()": {
					"returns": {
						"_0": "The value of the delay (in seconds)*"
					}
				},
				"getFxChild()": {
					"returns": {
						"_0": "fxChild The address of FxChild*"
					}
				},
				"getFxRootSender()": {
					"returns": {
						"_0": "The address of the FxRootSender*"
					}
				},
				"getGracePeriod()": {
					"returns": {
						"_0": "The value of the grace period (in seconds)*"
					}
				},
				"getGuardian()": {
					"returns": {
						"_0": "The address of the guardian*"
					}
				},
				"getMaximumDelay()": {
					"returns": {
						"_0": "The value of the maximum delay (in seconds)*"
					}
				},
				"getMinimumDelay()": {
					"returns": {
						"_0": "The value of the minimum delay (in seconds)*"
					}
				},
				"isActionQueued(bytes32)": {
					"details": "actionHash = keccak256(abi.encode(target, value, signature, data, executionTime, withDelegatecall))",
					"params": {
						"actionHash": "hash of the action to be checked"
					},
					"returns": {
						"_0": "True if the underlying action of actionHash is queued, false otherwise*"
					}
				},
				"processMessageFromRoot(uint256,address,bytes)": {
					"params": {
						"data": "The data from the abi-encoded cross-chain message*",
						"rootMessageSender": "The address that initially sent this message on Ethereum",
						"stateId": "The id of the cross-chain message created in the Ethereum/Polygon StateSender"
					}
				},
				"receiveFunds()": {
					"details": "Useful for actionsSet that needs funds to gets executed"
				},
				"updateDelay(uint256)": {
					"details": "It does not affect to actions set that are already queued",
					"params": {
						"delay": "The value of the delay (in seconds)*"
					}
				},
				"updateFxChild(address)": {
					"params": {
						"fxChild": "The address of the new FxChild*"
					}
				},
				"updateFxRootSender(address)": {
					"params": {
						"fxRootSender": "The address of the new FxRootSender*"
					}
				},
				"updateGracePeriod(uint256)": {
					"params": {
						"gracePeriod": "The value of the grace period (in seconds)*"
					}
				},
				"updateGuardian(address)": {
					"params": {
						"guardian": "The address of the new guardian*"
					}
				},
				"updateMaximumDelay(uint256)": {
					"params": {
						"maximumDelay": "The maximum delay (in seconds)*"
					}
				},
				"updateMinimumDelay(uint256)": {
					"params": {
						"minimumDelay": "The value of the minimum delay (in seconds)*"
					}
				}
			},
			"title": "PolygonBridgeExecutor",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"cancel(uint256)": {
					"notice": "Cancel the ActionsSet"
				},
				"execute(uint256)": {
					"notice": "Execute the ActionsSet"
				},
				"executeDelegateCall(address,bytes)": {
					"notice": "Allows to delegatecall a given target with an specific amount of value"
				},
				"getActionsSetById(uint256)": {
					"notice": "Returns the data of an actions set"
				},
				"getActionsSetCount()": {
					"notice": "Returns the total number of actions sets of the executor"
				},
				"getCurrentState(uint256)": {
					"notice": "Returns the current state of an actions set"
				},
				"getDelay()": {
					"notice": "Returns the delay (between queuing and execution)"
				},
				"getFxChild()": {
					"notice": "Returns the address of the FxChild"
				},
				"getFxRootSender()": {
					"notice": "Returns the address of the FxRoot Sender"
				},
				"getGracePeriod()": {
					"notice": "Returns the grace period"
				},
				"getGuardian()": {
					"notice": "Returns the address of the guardian"
				},
				"getMaximumDelay()": {
					"notice": "Returns the maximum delay"
				},
				"getMinimumDelay()": {
					"notice": "Returns the minimum delay"
				},
				"isActionQueued(bytes32)": {
					"notice": "Returns whether an actions set (by actionHash) is queued"
				},
				"processMessageFromRoot(uint256,address,bytes)": {
					"notice": "Process the cross-chain message from a FxChild contract through the Ethereum/Polygon StateSender"
				},
				"receiveFunds()": {
					"notice": "Allows to receive funds into the executor"
				},
				"updateDelay(uint256)": {
					"notice": "Update the delay, time between queueing and execution of ActionsSet"
				},
				"updateFxChild(address)": {
					"notice": "Update the address of the FxChild"
				},
				"updateFxRootSender(address)": {
					"notice": "Update the address of the FxRoot Sender"
				},
				"updateGracePeriod(uint256)": {
					"notice": "Update the grace period, the period after the execution time during which an actions set can be executed"
				},
				"updateGuardian(address)": {
					"notice": "Update guardian"
				},
				"updateMaximumDelay(uint256)": {
					"notice": "Update the maximum allowed delay"
				},
				"updateMinimumDelay(uint256)": {
					"notice": "Update the minimum allowed delay"
				}
			},
			"notice": "Implementation of the Polygon Bridge Executor, able to receive cross-chain transactions from Ethereum",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"Governance Bridge/contracts/bridges/PolygonBridgeExecutor.sol": "PolygonBridgeExecutor"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"Governance Bridge/contracts/bridges/BridgeExecutorBase.sol": {
			"keccak256": "0x2a7c3a10aa572a5a23c6c32e56ad405bdc5041612923d314d2b69b9aec635237",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://f6d96fea95ad2d4a709ef019351cb8717f65e42fb2eeb929b3a2cc51c7700089",
				"dweb:/ipfs/QmeJfX8sNkfwDbMTJvBjMxYU7U3NeV6J5HHNkhTmTYepaw"
			]
		},
		"Governance Bridge/contracts/bridges/PolygonBridgeExecutor.sol": {
			"keccak256": "0xef20afb27b0620ece0b3a7fee2cab4ef8b29d6fbe05b966d108f1cdddb008c10",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://d659314b9f32fc2cc7303f1bdd39ad66b208aa2201c810026dac271ccbf4059d",
				"dweb:/ipfs/QmdMi3HuKc8CgvEtxpzDS4LSDMAPQrw75TnrWWJMPpvtVE"
			]
		},
		"Governance Bridge/contracts/dependencies/polygon/fxportal/interfaces/IFxMessageProcessor.sol": {
			"keccak256": "0xf08574b5a22a042490bb7f37e878a83bf8b5d109bd0bbd98c1cad25f15f4cf37",
			"license": "MIT",
			"urls": [
				"bzz-raw://7318f68c0c1bad43ad9da6616641beb470d847860aaa97492120230edf53e2b4",
				"dweb:/ipfs/Qmbj9Q95MCtiEKQF1mKjQPEdQ7qjfGC6unxW57j8KdjDZv"
			]
		},
		"Governance Bridge/contracts/interfaces/IExecutorBase.sol": {
			"keccak256": "0x559e6a68e136f80c04734b6ddf22aa7ab50e8f1aff55c5b0f647bc2769e6ff06",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://1077c52ab832f0f6fa8ae7e1fc7f4529afbd0ad151ef8bdbf950b1449f0748d1",
				"dweb:/ipfs/QmVegbuuLKdBSufijM8RChiAXs5EAUC6BHXf2NGFheFkDM"
			]
		}
	},
	"version": 1
}